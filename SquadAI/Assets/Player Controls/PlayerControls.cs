//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Player Controls/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""GroundMovement"",
            ""id"": ""d7f43fef-f270-4e55-8b08-90f877ae7c62"",
            ""actions"": [
                {
                    ""name"": ""HorizontalMovement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5ce9df55-f08a-48c7-ab6b-65b2355b873f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""53d216f9-00e1-4cdd-bea6-52581e31f97a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f5d6bd85-5b1b-49c3-a631-bbe57e3911ab"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a1bd7128-de82-4cea-831c-7cde20b7127f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""dc40d33c-074b-453d-860f-37fece03bb62"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""5c186d46-9753-44ba-84c5-f5f056d40db5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Recall"",
                    ""type"": ""Button"",
                    ""id"": ""d0fda936-5917-4116-9565-560c39326c48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CycleSquad"",
                    ""type"": ""Button"",
                    ""id"": ""f3803d54-f94f-4f9a-b402-3f2caecdb07f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roaming"",
                    ""type"": ""Button"",
                    ""id"": ""7f7b0d09-8c61-4880-bc97-eea9fb5fde55"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Find"",
                    ""type"": ""Button"",
                    ""id"": ""87e51e19-0545-4c09-b320-ed93026369cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hunt"",
                    ""type"": ""Button"",
                    ""id"": ""9f1de09f-cc51-419a-8f99-b1d8f23ec364"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""e79525ca-d10e-48eb-8bec-e97c6cc39cb8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""73592666-cbfd-48f4-8a77-f78488e8159f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a56b091c-41bb-45fd-bf4d-7559af6617e0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""320a41dd-07b6-47c0-aa99-3c664f9a5a99"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3ef99ec7-5c66-4c28-a9a7-08a8eea90573"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""81d4a8b4-6b44-4ca4-a86e-821f45467777"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5d0417dc-350f-4d3c-88f5-1cee78a6e7a1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f87b8df5-f984-4c83-9c10-c5acb0fc30a2"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d1fd5a2-a2c2-40aa-be22-b5b8b4d94b5b"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9dada1d4-2f84-480a-84e8-7796f2897434"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c1239f0-1e62-4009-87de-e56f3d3376ff"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Recall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a78df51f-398f-4614-9db8-8264d5b1d40a"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""CycleSquad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e7f72965-ee7d-4a6f-b734-90fcacf4d60a"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Roaming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83858769-5e7c-498e-a330-80072024d895"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Find"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1ae59b6-a675-4dc9-bbb0-2e7ab6ec8f94"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b429b45b-0b59-494d-bc95-eebb2fc929cd"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Hunt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""64583c6f-e5aa-4b4c-8f20-50b7018fe2ba"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""New control scheme"",
            ""bindingGroup"": ""New control scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // GroundMovement
        m_GroundMovement = asset.FindActionMap("GroundMovement", throwIfNotFound: true);
        m_GroundMovement_HorizontalMovement = m_GroundMovement.FindAction("HorizontalMovement", throwIfNotFound: true);
        m_GroundMovement_Jump = m_GroundMovement.FindAction("Jump", throwIfNotFound: true);
        m_GroundMovement_MouseX = m_GroundMovement.FindAction("MouseX", throwIfNotFound: true);
        m_GroundMovement_MouseY = m_GroundMovement.FindAction("MouseY", throwIfNotFound: true);
        m_GroundMovement_RightClick = m_GroundMovement.FindAction("RightClick", throwIfNotFound: true);
        m_GroundMovement_LeftClick = m_GroundMovement.FindAction("LeftClick", throwIfNotFound: true);
        m_GroundMovement_Recall = m_GroundMovement.FindAction("Recall", throwIfNotFound: true);
        m_GroundMovement_CycleSquad = m_GroundMovement.FindAction("CycleSquad", throwIfNotFound: true);
        m_GroundMovement_Roaming = m_GroundMovement.FindAction("Roaming", throwIfNotFound: true);
        m_GroundMovement_Find = m_GroundMovement.FindAction("Find", throwIfNotFound: true);
        m_GroundMovement_Hunt = m_GroundMovement.FindAction("Hunt", throwIfNotFound: true);
        m_GroundMovement_Escape = m_GroundMovement.FindAction("Escape", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GroundMovement
    private readonly InputActionMap m_GroundMovement;
    private IGroundMovementActions m_GroundMovementActionsCallbackInterface;
    private readonly InputAction m_GroundMovement_HorizontalMovement;
    private readonly InputAction m_GroundMovement_Jump;
    private readonly InputAction m_GroundMovement_MouseX;
    private readonly InputAction m_GroundMovement_MouseY;
    private readonly InputAction m_GroundMovement_RightClick;
    private readonly InputAction m_GroundMovement_LeftClick;
    private readonly InputAction m_GroundMovement_Recall;
    private readonly InputAction m_GroundMovement_CycleSquad;
    private readonly InputAction m_GroundMovement_Roaming;
    private readonly InputAction m_GroundMovement_Find;
    private readonly InputAction m_GroundMovement_Hunt;
    private readonly InputAction m_GroundMovement_Escape;
    public struct GroundMovementActions
    {
        private @PlayerControls m_Wrapper;
        public GroundMovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @HorizontalMovement => m_Wrapper.m_GroundMovement_HorizontalMovement;
        public InputAction @Jump => m_Wrapper.m_GroundMovement_Jump;
        public InputAction @MouseX => m_Wrapper.m_GroundMovement_MouseX;
        public InputAction @MouseY => m_Wrapper.m_GroundMovement_MouseY;
        public InputAction @RightClick => m_Wrapper.m_GroundMovement_RightClick;
        public InputAction @LeftClick => m_Wrapper.m_GroundMovement_LeftClick;
        public InputAction @Recall => m_Wrapper.m_GroundMovement_Recall;
        public InputAction @CycleSquad => m_Wrapper.m_GroundMovement_CycleSquad;
        public InputAction @Roaming => m_Wrapper.m_GroundMovement_Roaming;
        public InputAction @Find => m_Wrapper.m_GroundMovement_Find;
        public InputAction @Hunt => m_Wrapper.m_GroundMovement_Hunt;
        public InputAction @Escape => m_Wrapper.m_GroundMovement_Escape;
        public InputActionMap Get() { return m_Wrapper.m_GroundMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GroundMovementActions set) { return set.Get(); }
        public void SetCallbacks(IGroundMovementActions instance)
        {
            if (m_Wrapper.m_GroundMovementActionsCallbackInterface != null)
            {
                @HorizontalMovement.started -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnHorizontalMovement;
                @HorizontalMovement.performed -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnHorizontalMovement;
                @HorizontalMovement.canceled -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnHorizontalMovement;
                @Jump.started -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnJump;
                @MouseX.started -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnMouseX;
                @MouseX.performed -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnMouseX;
                @MouseX.canceled -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnMouseX;
                @MouseY.started -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnMouseY;
                @MouseY.performed -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnMouseY;
                @MouseY.canceled -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnMouseY;
                @RightClick.started -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnRightClick;
                @RightClick.performed -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnRightClick;
                @RightClick.canceled -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnRightClick;
                @LeftClick.started -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnLeftClick;
                @LeftClick.performed -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnLeftClick;
                @LeftClick.canceled -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnLeftClick;
                @Recall.started -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnRecall;
                @Recall.performed -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnRecall;
                @Recall.canceled -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnRecall;
                @CycleSquad.started -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnCycleSquad;
                @CycleSquad.performed -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnCycleSquad;
                @CycleSquad.canceled -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnCycleSquad;
                @Roaming.started -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnRoaming;
                @Roaming.performed -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnRoaming;
                @Roaming.canceled -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnRoaming;
                @Find.started -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnFind;
                @Find.performed -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnFind;
                @Find.canceled -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnFind;
                @Hunt.started -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnHunt;
                @Hunt.performed -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnHunt;
                @Hunt.canceled -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnHunt;
                @Escape.started -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnEscape;
                @Escape.performed -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnEscape;
                @Escape.canceled -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnEscape;
            }
            m_Wrapper.m_GroundMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @HorizontalMovement.started += instance.OnHorizontalMovement;
                @HorizontalMovement.performed += instance.OnHorizontalMovement;
                @HorizontalMovement.canceled += instance.OnHorizontalMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @MouseX.started += instance.OnMouseX;
                @MouseX.performed += instance.OnMouseX;
                @MouseX.canceled += instance.OnMouseX;
                @MouseY.started += instance.OnMouseY;
                @MouseY.performed += instance.OnMouseY;
                @MouseY.canceled += instance.OnMouseY;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
                @Recall.started += instance.OnRecall;
                @Recall.performed += instance.OnRecall;
                @Recall.canceled += instance.OnRecall;
                @CycleSquad.started += instance.OnCycleSquad;
                @CycleSquad.performed += instance.OnCycleSquad;
                @CycleSquad.canceled += instance.OnCycleSquad;
                @Roaming.started += instance.OnRoaming;
                @Roaming.performed += instance.OnRoaming;
                @Roaming.canceled += instance.OnRoaming;
                @Find.started += instance.OnFind;
                @Find.performed += instance.OnFind;
                @Find.canceled += instance.OnFind;
                @Hunt.started += instance.OnHunt;
                @Hunt.performed += instance.OnHunt;
                @Hunt.canceled += instance.OnHunt;
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
            }
        }
    }
    public GroundMovementActions @GroundMovement => new GroundMovementActions(this);
    private int m_NewcontrolschemeSchemeIndex = -1;
    public InputControlScheme NewcontrolschemeScheme
    {
        get
        {
            if (m_NewcontrolschemeSchemeIndex == -1) m_NewcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("New control scheme");
            return asset.controlSchemes[m_NewcontrolschemeSchemeIndex];
        }
    }
    public interface IGroundMovementActions
    {
        void OnHorizontalMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnMouseX(InputAction.CallbackContext context);
        void OnMouseY(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
        void OnLeftClick(InputAction.CallbackContext context);
        void OnRecall(InputAction.CallbackContext context);
        void OnCycleSquad(InputAction.CallbackContext context);
        void OnRoaming(InputAction.CallbackContext context);
        void OnFind(InputAction.CallbackContext context);
        void OnHunt(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
    }
}
